#include <iostream>
#include <algorithm>

using namespace std;

string solve(string str, int max_size)
{
//    А нужно ли сохранять str в new_text? Как передаются аргументы в функции в C/C++?
  
    /*

    Как передаются аргументы в функции в C/C++?

    Аргументы могут передаваться по значению и по ссылке. 
    При передаче аргументов по значению внешний объект, который передается в качестве аргумента в функцию, не может быть изменен в этой функции. 
    В функцию передается само значение этого объекта. При компиляции функции для ее параметров выделяются отдельные участки памяти. 
    При вызове функции вычисляются значения аргументов, которые передаются на место параметров. И затем значения аргументов заносятся в эти участки памяти. 
    То есть функция манипулирует копиями значений объектов, а не самими объектами.

    При передаче параметров по ссылке передается ссылка на объект, через которую мы можем манипулировать самим объектов, а не просто его значением.

    Так как в прошлый раз было сказано
     // Логичнее вернуть новую строку, а не изменять существующую
        void solve(string& str, int max_size)

    Я создал новую переменную для того что бы вернуть новую строку, а не изменять существующую, но проглядел что моя функция возвращает строку.
    В данной реализации переменная new_text лишняя.
    
    */

    // Удаляем все пробелы больше одного
   str.erase(unique_copy(str.begin(),str.end(),str.begin(), [](char ch1, char ch2) { return ch1 == ' ' && ch2 == ' '; }),str.end());

    // Проверяем чем является первый символ
    if (str.at(0) == ' ')
       str.erase(0, 1);

    // Проверяем чем является последний символ
    if (str.back() == ' ')
       str.pop_back();

    // Если размер больше максимального значения, уменьшаем размер
    if (str.size() > max_size)
    {
       str.erase(max_size, max_size +str.size());
       str.append("...");
    }

    return str;
}

int main()
{
    // Задаем исходные данные
    int m = 40;
    string text = "   Lorem   ipsum  dolor      sit  amet,    consectetuer adipiscing elit.       Maecenas porttitor congue   massa. Fusce posuere, magna sed  pulvinar ultricies, purus lectus malesuada libero, sit amet commodo magna eros quis     urna.      ";

    // Выводим исходную строку
    cout << text << '\n';
    // Выводим исправленную строку
    cout << endl << solve(text, m) << '\n';

    return 0;
}
